import { NextApiRequest, NextApiResponse } from 'next'
import formidable from 'formidable'
import fs from 'fs'
import * as pdfParse from 'pdf-parse'

// Configuraci√≥n para el manejo de archivos
export const config = {
  api: {
    bodyParser: false,
  },
}

// Interface unificada para los datos extra√≠dos del PDF
interface ExtractedPDFData {
  fechaCuentaCobro: string | null        // Fecha de la cuenta de cobro en formato dd-mm-yyyy
  companiaReceptora: string | null       // Compa√±√≠a receptora
  acreedor: string | null                // Acreedor
  concepto: string | null                // Concepto
  descripcion: string | null             // Descripci√≥n completa
  valorSolicitud: number | null          // Valor solicitud (num√©rico)
  tieneIVA: boolean                      // ¬øTiene IVA?
  valorIVA: number | null                // Valor IVA (num√©rico)
  valorTotalSolicitud: number | null     // Valor total solicitud (num√©rico)
  
  // Metadatos
  success: boolean
  confidence: 'high' | 'medium' | 'low'
  extractedFields: string[]
}

// Lista de conceptos v√°lidos del sistema
const CONCEPTOS_VALIDOS = [
  'Convenio de uso de red',
  'Reconocimiento y pago de comisiones por recaudo Leasing',
  'Reconocimiento y pago de comisiones por recaudo Vida Deudores Leasing', 
  'Costo de recaudo TRC',
  'Referenciaci√≥n de clientes',
  'Bono cumplimiento penetraciones seguros voluntarios',
  'Retornos t√≠tulos de capitalizaci√≥n GanaM√°s'
]

// Patrones de regex seg√∫n los criterios espec√≠ficos del usuario
const PATTERNS = {
  // 1. CUENTA DE COBRO (para descripci√≥n - primera l√≠nea)
  cuentaCobro: /CUENTA\s+DE\s+COBRO\s+(?:No\.?\s*|N[o¬∫]\.?\s*)([0-9\-A-Z]+)/gi,
  
  // 2. ACREEDOR (despu√©s de "DEBE A:")
  acreedor: /(?:DEBE\s+A:?|ACREEDOR:?)\s*\n?\s*([^\n\r]{5,80})/gi,
  
  // 3. TOTAL (respetando may√∫sculas - "Total" exacto)
  totalEspecifico: /(?:^|\n|\s)Total\s*\$?\s*([\d,\.]+)/g,
  
  // 3b. TOTAL FINAL (todo may√∫sculas "TOTAL")
  totalFinal: /(?:^|\n|\s)TOTAL\s*\$?\s*([\d,\.]+)/g,
  
  // 4. IVA (respetando "IVA" o "Iva" exacto)
  ivaEspecifico: /(?:^|\n|\s)(?:IVA|Iva)(?:\s*\([0-9]+%?\))?\s*(?:\n|\s)*\$?\s*([\d,\.]+)/g,
  
  // 5. N√öMEROS DE FACTURA - ELIMINADO POR CAUSAR EXTRACCIONES INCORRECTAS
  
  // 6. CONCEPTOS espec√≠ficos con patrones flexibles
  conceptosPatrones: [
    { concepto: 'Convenio de uso de red', patron: /convenio\s+de\s+uso\s+de\s+red/gi },
    { concepto: 'Reconocimiento y pago de comisiones por recaudo Leasing', patron: /(?:reconocimiento\s+y\s+pago\s+de\s+)?comisiones\s+por\s+recaudo\s+leasing/gi },
    { concepto: 'Reconocimiento y pago de comisiones por recaudo Vida Deudores Leasing', patron: /comisiones\s+por\s+recaudo\s+vida\s+deudores\s+leasing/gi },
    { concepto: 'Costo de recaudo TRC', patron: /costo\s+de\s+recaudo\s+trc/gi },
    { concepto: 'Referenciaci√≥n de clientes', patron: /referenciaci√≥n\s+de\s+clientes/gi },
    { concepto: 'Bono cumplimiento penetraciones seguros voluntarios', patron: /bono\s+cumplimiento\s+penetraciones\s+seguros\s+voluntarios/gi },
    { concepto: 'Retornos t√≠tulos de capitalizaci√≥n GanaM√°s', patron: /retornos\s+t√≠tulos\s+de\s+capitalizaci√≥n\s+ganam√°s/gi }
  ]
}

function cleanNumericValue(value: string): string {
  // Limpiar valor num√©rico: manejar formato colombiano (1,234,567.89 o 1.234.567,89)
  let cleaned = value.replace(/[^\d,\.]/g, '')
  
  // Si tiene tanto comas como puntos, determinar cu√°l es el separador decimal
  if (cleaned.includes(',') && cleaned.includes('.')) {
    // Si el √∫ltimo separador es una coma, es formato europeo (1.234.567,89)
    const lastComma = cleaned.lastIndexOf(',')
    const lastDot = cleaned.lastIndexOf('.')
    
    if (lastComma > lastDot) {
      // Formato: 1.234.567,89 -> convertir a 1234567.89
      cleaned = cleaned.replace(/\./g, '').replace(',', '.')
    } else {
      // Formato: 1,234,567.89 -> convertir a 1234567.89
      cleaned = cleaned.replace(/,/g, '')
    }
  } else if (cleaned.includes(',')) {
    // Solo comas - puede ser separador de miles o decimal
    const commaCount = (cleaned.match(/,/g) || []).length
    if (commaCount === 1 && cleaned.length - cleaned.lastIndexOf(',') <= 3) {
      // Probablemente separador decimal
      cleaned = cleaned.replace(',', '.')
    } else {
      // Probablemente separadores de miles
      cleaned = cleaned.replace(/,/g, '')
    }
  }
  
  console.log(`üßÆ Limpiando valor: "${value}" -> "${cleaned}"`)
  return cleaned
}

function extractDataFromText(text: string): ExtractedPDFData {
  const result: ExtractedPDFData = {
    fechaCuentaCobro: null,
    companiaReceptora: null,
    acreedor: null,
    concepto: null,
    descripcion: null,
    valorSolicitud: null,
    tieneIVA: false,
    valorIVA: null,
    valorTotalSolicitud: null,
    success: true,
    confidence: 'low',
    extractedFields: []
  }

  try {
    console.log('üîç === NUEVA L√ìGICA DE EXTRACCI√ìN SEG√öN CRITERIOS ===')
    
    // CRITERIO 1: Fecha de la cuenta de cobro ‚úÖ
    console.log('1Ô∏è‚É£ Extrayendo fecha de la cuenta de cobro...')
    
    // Patrones de fecha espec√≠ficos para documentos de cuenta de cobro
    const fechaPatterns = [
      /(\d{1,2})\s+de\s+(\w+)\s+de\s+(\d{4})/gi,                      // "23 de July de 2025" (patr√≥n principal)
      /(\d{1,2})\s+(\w+)\s+(\d{4})/gi,                                // "23 July 2025"
      /fecha[:\s]*(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/gi,           // "Fecha: dd/mm/yyyy"
      /(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/g,                       // "dd/mm/yyyy" o "dd-mm-yyyy"
      /emisi[√≥o]n[:\s]*(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/gi,     // "Emisi√≥n: dd/mm/yyyy"
      /cobro.*?(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{4})/gi,             // "cobro dd/mm/yyyy"
    ]
    
    const meses: {[key: string]: string} = {
      // Espa√±ol
      'enero': '01', 'febrero': '02', 'marzo': '03', 'abril': '04',
      'mayo': '05', 'junio': '06', 'julio': '07', 'agosto': '08',
      'septiembre': '09', 'octubre': '10', 'noviembre': '11', 'diciembre': '12',
      // Ingl√©s (por si aparecen mezclados)
      'january': '01', 'february': '02', 'march': '03', 'april': '04',
      'may': '05', 'june': '06', 'july': '07', 'august': '08',
      'september': '09', 'october': '10', 'november': '11', 'december': '12'
    }
    
    // Buscar la fecha en las primeras l√≠neas del documento (donde suele aparecer)
    const primeras500Chars = text.substring(0, 500)
    console.log('üìÑ Buscando fecha en las primeras l√≠neas del documento...')
    
    for (let i = 0; i < fechaPatterns.length; i++) {
      const pattern = fechaPatterns[i]
      // Resetear el √≠ndice de regex para cada b√∫squeda
      pattern.lastIndex = 0
      
      const fechaMatch = primeras500Chars.match(pattern)
      if (fechaMatch && fechaMatch.length > 0) {
        console.log(`üîç Patr√≥n ${i+1} encontr√≥: "${fechaMatch[0]}"`)
        
        // Ejecutar el patr√≥n de nuevo para obtener los grupos
        pattern.lastIndex = 0
        const grupos = pattern.exec(fechaMatch[0])
        
        if (grupos) {
          let dia, mes, a√±o
          
          // Determinar el tipo de patr√≥n y extraer componentes
          if (pattern.source.includes('de\\s+(\\w+)\\s+de')) {
            // Patr√≥n: "23 de July de 2025"
            dia = grupos[1]
            mes = meses[grupos[2].toLowerCase()] || '01'
            a√±o = grupos[3]
            console.log(`üìÖ Formato "dd de mes de yyyy": d√≠a=${dia}, mes=${grupos[2]}‚Üí${mes}, a√±o=${a√±o}`)
          } else if (pattern.source === '(\\d{1,2})\\s+(\\w+)\\s+(\\d{4})') {
            // Patr√≥n: "23 July 2025"
            dia = grupos[1]
            mes = meses[grupos[2].toLowerCase()] || '01'
            a√±o = grupos[3]
            console.log(`üìÖ Formato "dd mes yyyy": d√≠a=${dia}, mes=${grupos[2]}‚Üí${mes}, a√±o=${a√±o}`)
          } else {
            // Patrones num√©ricos: dd/mm/yyyy, dd-mm-yyyy, etc.
            dia = grupos[1]
            mes = grupos[2]
            a√±o = grupos[3]
            console.log(`üìÖ Formato num√©rico: d√≠a=${dia}, mes=${mes}, a√±o=${a√±o}`)
          }
          
          // Normalizar formato
          dia = dia.padStart(2, '0')
          if (mes.length === 1) {
            mes = mes.padStart(2, '0')
          }
          
          // Asegurar a√±o de 4 d√≠gitos
          if (a√±o.length === 2) {
            a√±o = parseInt(a√±o) > 50 ? `19${a√±o}` : `20${a√±o}`
          }
          
          // Validar que sea una fecha v√°lida
          const fechaNum = new Date(`${a√±o}-${mes}-${dia}`)
          if (fechaNum instanceof Date && !isNaN(fechaNum.getTime())) {
            const fechaFinal = `${dia}-${mes}-${a√±o}`
            result.fechaCuentaCobro = fechaFinal
            result.extractedFields.push('fechaCuentaCobro')
            console.log('‚úÖ Fecha de cuenta de cobro extra√≠da:', fechaFinal)
            break
          } else {
            console.log('‚ùå Fecha inv√°lida:', `${dia}-${mes}-${a√±o}`)
          }
        }
      }
    }

    // CRITERIO 2: DETECCI√ìN DE ACREEDOR (Auto-detecci√≥n) ‚úÖ
    console.log('2Ô∏è‚É£ Detectando Acreedor...')
    
    // Extraer la secci√≥n despu√©s de "DEBE A:" hasta "Por concepto de"
    const seccionAcreedorMatch = text.match(/DEBE\s+A:\s*(.*?)(?:Por\s+concepto\s+de|$)/i)
    let seccionAcreedor = seccionAcreedorMatch ? seccionAcreedorMatch[1] : ''
    
    console.log('üìã Analizando secci√≥n acreedor despu√©s de "DEBE A:":', seccionAcreedor.substring(0, 200).replace(/\s+/g, ' '))
    
    // Base de datos de acreedores disponibles
    const acreedoresDisponibles = [
      {
        nit: '8600343137',
        nitFormateado: '860.034.313-7',
        nombre: 'DAVIVIENDA S.A.',
        codigo: 'NT-860034313-7-DAVIVIENDA S.A.',
        palabrasClave: ['davivienda']
      },
      {
        nit: '8600025032',
        nitFormateado: '860.002.503-2',
        nombre: 'COMPA√ë√çA SEGUROS BOL√çVAR S.A.',
        codigo: 'NT-860002503-2-COMPA√ë√çA SEGUROS BOL√çVAR S.A.',
        palabrasClave: ['compa√±√≠a', 'seguros', 'bolivar', 'bol√≠var']
      },
      {
        nit: '8300254487',
        nitFormateado: '830.025.448-7',
        nombre: 'GRUPO BOL√çVAR S.A.',
        codigo: 'NT-830025448-7-GRUPO BOL√çVAR S.A.',
        palabrasClave: ['grupo', 'bolivar', 'bol√≠var']
      }
    ]
    
    let acreedorEncontrado = null
    
    // PRIMERA B√öSQUEDA: Por NIT
    console.log('üîç Primera b√∫squeda: Por NIT del acreedor...')
    
    const nitPatternsAcreedor = [
      /NIT\.?\s*(\d{3}\.?\d{3}\.?\d{3}[-\.]?\d)/gi,
      /(\d{3}\.?\d{3}\.?\d{3}[-\.]?\d)/g
    ]
    
    for (const pattern of nitPatternsAcreedor) {
      let match
      while ((match = pattern.exec(seccionAcreedor)) !== null) {
        const nitEncontrado = match[1] || match[0]
        const nitLimpio = nitEncontrado.replace(/[\.\-\s]/g, '')
        console.log(`üî¢ NIT acreedor encontrado: "${nitEncontrado}" ‚Üí limpio: "${nitLimpio}"`)
        
        // Buscar coincidencia con acreedores disponibles
        for (const acreedor of acreedoresDisponibles) {
          if (acreedor.nit === nitLimpio || acreedor.nitFormateado === nitEncontrado) {
            acreedorEncontrado = acreedor
            console.log(`‚úÖ Acreedor encontrado por NIT: ${acreedor.nombre}`)
            break
          }
        }
        
        if (acreedorEncontrado) break
        
        if (!pattern.global) break
      }
      if (acreedorEncontrado) break
    }
    
    // SEGUNDA B√öSQUEDA: Por nombre/palabras clave (si NIT falla)
    if (!acreedorEncontrado) {
      console.log('üîç Segunda b√∫squeda: Por nombre del acreedor...')
      
      const seccionNormalizada = seccionAcreedor.toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '') // Quitar acentos
      
      for (const acreedor of acreedoresDisponibles) {
        let coincidencias = 0
        const palabrasEncontradas: string[] = []
        
        for (const palabra of acreedor.palabrasClave) {
          const palabraNormalizada = palabra.toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
          
          if (seccionNormalizada.includes(palabraNormalizada)) {
            coincidencias++
            palabrasEncontradas.push(palabra)
          }
        }
        
        console.log(`üî§ ${acreedor.nombre}: ${coincidencias} coincidencias [${palabrasEncontradas.join(', ')}]`)
        
        // Se requiere al menos 1 coincidencia para acreedores (m√°s estricto)
        if (coincidencias >= 1) {
          acreedorEncontrado = acreedor
          console.log(`‚úÖ Acreedor encontrado por nombre: ${acreedor.nombre}`)
          break
        }
      }
    }
    
    // FALLBACK: M√©todo regex b√°sico (si auto-detecci√≥n falla)
    if (!acreedorEncontrado) {
      console.log('üîç Fallback: M√©todo regex b√°sico...')
      const acreedorMatch = text.match(PATTERNS.acreedor)
      if (acreedorMatch && acreedorMatch[1]) {
        const nombreExtraido = acreedorMatch[1]
          .replace(/nit[\s\.].*$/gi, '') // Remover NIT si est√° en la misma l√≠nea
          .trim()
        
        // Crear resultado b√°sico sin NIT espec√≠fico
        result.acreedor = nombreExtraido
        result.extractedFields.push('acreedor')
        console.log('‚úÖ Acreedor extra√≠do (fallback):', result.acreedor)
      }
    } else {
      // Asignar resultado de auto-detecci√≥n
      result.acreedor = acreedorEncontrado.codigo
      result.extractedFields.push('acreedor')
      console.log('‚úÖ Acreedor identificado (auto-detecci√≥n):', acreedorEncontrado.codigo)
    }

    // Encontrar d√≥nde termina el acreedor para extraer el "cuerpo" despu√©s
    let cuerpoTexto = text
    const debeAMatch = text.match(/DEBE\s+A:.*?(?=Por\s+concepto\s+de)/i)
    if (debeAMatch) {
      const posicionFinal = text.indexOf(debeAMatch[0]) + debeAMatch[0].length
      cuerpoTexto = text.substring(posicionFinal)
      console.log('üìù Cuerpo extra√≠do despu√©s del acreedor (primeros 200 chars):', cuerpoTexto.substring(0, 200))
    }

    // CRITERIO 2.5: DETECCI√ìN DE COMPA√ë√çA RECEPTORA (Auto-detecci√≥n del Grupo Bol√≠var) ‚úÖ
    console.log('2Ô∏è‚É£.5 Detectando Compa√±√≠a Receptora del Grupo Bol√≠var...')
    
    // Extraer el encabezado antes de "DEBE A:"
    const encabezadoMatch = text.match(/^(.*?)DEBE\s+A:/i)
    let encabezado = encabezadoMatch ? encabezadoMatch[1] : text.substring(0, 1000)
    
    console.log('üìã Analizando encabezado antes de "DEBE A:":', encabezado.substring(0, 200).replace(/\s+/g, ' '))
    
    // Definir empresas del Grupo Bol√≠var con sus NITs y palabras clave
    const empresasGrupoBolivar = [
      {
        nit: '8600021807',
        nitFormateado: '860.002.180-7',
        nombre: 'CONSTRUCTORA BOL√çVAR S.A.',
        codigo: 'NT-860002180-7-CONSTRUCTORA BOL√çVAR S.A.',
        palabrasClave: ['constructora', 'bolivar', 'bol√≠var']
      },
      {
        nit: '8600025032',
        nitFormateado: '860.002.503-2', 
        nombre: 'COMPA√ë√çA SEGUROS BOL√çVAR S.A.',
        codigo: 'NT-860002503-2-COMPA√ë√çA SEGUROS BOL√çVAR S.A.',
        palabrasClave: ['compa√±ia', 'compa√±√≠a', 'seguros', 'bolivar', 'bol√≠var']
      },
      {
        nit: '8600343137',
        nitFormateado: '860.034.313-7',
        nombre: 'DAVIVIENDA S.A.',
        codigo: 'NT-860034313-7-DAVIVIENDA S.A.',
        palabrasClave: ['davivienda', 'banco']
      },
      {
        nit: '8300254487',
        nitFormateado: '830.025.448-7',
        nombre: 'GRUPO BOL√çVAR S.A.',
        codigo: 'NT-830025448-7-GRUPO BOL√çVAR S.A.',
        palabrasClave: ['grupo', 'bolivar', 'bol√≠var']
      },
      {
        nit: '8300749405',
        nitFormateado: '830.074.940-5',
        nombre: 'SEGUROS BOL√çVAR S.A.',
        codigo: 'NT-830074940-5-SEGUROS BOL√çVAR S.A.',
        palabrasClave: ['seguros', 'bolivar', 'bol√≠var']
      }
    ]
    
    let companiaEncontrada = null
    
    // PRIMERA B√öSQUEDA: Por NIT
    console.log('üîç Primera b√∫squeda: Por NIT...')
    
    // Buscar patrones de NIT en el encabezado
    const nitPatternsCompania = [
      /NIT\.?\s*N[o¬∫]?\.?\s*(\d{3}\.?\d{3}\.?\d{3}[-\.]?\d)/gi,
      /NIT[:\s\.]*(\d{3}\.?\d{3}\.?\d{3}[-\.]?\d)/gi,
      /(\d{3}\.?\d{3}\.?\d{3}[-\.]?\d)/g
    ]
    
    for (const pattern of nitPatternsCompania) {
      let match
      while ((match = pattern.exec(encabezado)) !== null) {
        const nitEncontrado = match[1] || match[0]
        // Limpiar el NIT (quitar puntos y guiones)
        const nitLimpio = nitEncontrado.replace(/[\.\-\s]/g, '')
        console.log(`üî¢ NIT encontrado: "${nitEncontrado}" ‚Üí limpio: "${nitLimpio}"`)
        
        // Buscar coincidencia con empresas del Grupo Bol√≠var
        for (const empresa of empresasGrupoBolivar) {
          if (empresa.nit === nitLimpio || empresa.nitFormateado === nitEncontrado) {
            companiaEncontrada = empresa
            console.log(`‚úÖ Compa√±√≠a encontrada por NIT: ${empresa.nombre}`)
            break
          }
        }
        
        if (companiaEncontrada) break
        
        // Evitar bucle infinito si no es global
        if (!pattern.global) break
      }
      if (companiaEncontrada) break
    }
    
    // SEGUNDA B√öSQUEDA: Por nombre/palabras clave (si NIT falla)
    if (!companiaEncontrada) {
      console.log('üîç Segunda b√∫squeda: Por nombre/palabras clave...')
      
      // Normalizar texto del encabezado
      const encabezadoNormalizado = encabezado.toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '') // Quitar acentos
      
      for (const empresa of empresasGrupoBolivar) {
        let coincidencias = 0
        const palabrasEncontradas: string[] = []
        
        for (const palabra of empresa.palabrasClave) {
          const palabraNormalizada = palabra.toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
          
          if (encabezadoNormalizado.includes(palabraNormalizada)) {
            coincidencias++
            palabrasEncontradas.push(palabra)
          }
        }
        
        console.log(`üî§ ${empresa.nombre}: ${coincidencias} coincidencias [${palabrasEncontradas.join(', ')}]`)
        
        // Se requieren al menos 2 coincidencias para considerar v√°lida la empresa
        if (coincidencias >= 2) {
          companiaEncontrada = empresa
          console.log(`‚úÖ Compa√±√≠a encontrada por nombre: ${empresa.nombre}`)
          break
        }
      }
    }
    
    // Asignar resultado
    if (companiaEncontrada) {
      result.companiaReceptora = companiaEncontrada.codigo
      result.extractedFields.push('companiaReceptora')
      console.log('‚úÖ Compa√±√≠a receptora identificada:', companiaEncontrada.codigo)
    } else {
      console.log('‚ùå No se pudo identificar la compa√±√≠a receptora del Grupo Bol√≠var')
    }

    // CRITERIO 3: EXTRACCI√ìN DE CONCEPTO (Nueva l√≥gica mejorada) ‚úÖ
    console.log('3Ô∏è‚É£ Extrayendo concepto del documento...')
    
    // M√âTODO PRINCIPAL: Buscar el p√°rrafo completo que inicia con "Por concepto de"
    console.log('üîç M√©todo principal: Buscando p√°rrafo "Por concepto de"...')
    
    // Patr√≥n mejorado para capturar p√°rrafos completos que pueden abarcar m√∫ltiples l√≠neas
    const parrafoPatterns = [
      // P√°rrafo completo hasta dos puntos (:)
      /Por\s+concepto\s+de\s+([^:]+:?)/gi,
      // P√°rrafo hasta salto de l√≠nea doble o final
      /Por\s+concepto\s+de\s+([^\n\r]+(?:\n[^\n\r]+)*?)(?:\n\s*\n|$)/gi,
      // P√°rrafo hasta encontrar una l√≠nea que empiece con may√∫scula (nueva secci√≥n)
      /Por\s+concepto\s+de\s+(.*?)(?=\n[A-Z√Å√â√ç√ì√ö√ë]|$)/gi,
      // Fallback simple para una sola l√≠nea
      /Por\s+concepto\s+de\s*([^\n\r]+)/gi
    ]
    
    let parrafoPorConcepto = null
    
    for (const pattern of parrafoPatterns) {
      const match = text.match(pattern)
      if (match && match[0]) {
        parrafoPorConcepto = match[0].trim()
        console.log('üìã P√°rrafo "Por concepto de" encontrado:', parrafoPorConcepto)
        break
      }
    }
    
    if (parrafoPorConcepto) {
      // COMPARACI√ìN CON CONCEPTOS V√ÅLIDOS
      console.log('üîç Comparando p√°rrafo con conceptos v√°lidos del sistema...')
      
      // Funci√≥n para normalizar texto (min√∫sculas, sin acentos, espacios limpios)
      const normalizar = (texto: string): string => {
        return texto.toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '') // Quitar acentos
          .replace(/\s+/g, ' ')
          .trim()
      }
      
      const parrafoNormalizado = normalizar(parrafoPorConcepto)
      console.log('üìù P√°rrafo normalizado:', parrafoNormalizado.substring(0, 150) + '...')
      
      // Verificar cada concepto v√°lido
      for (const concepto of CONCEPTOS_VALIDOS) {
        const conceptoNormalizado = normalizar(concepto)
        
        console.log(`   üîé Verificando concepto: "${concepto}"`)
        console.log(`   üìù Concepto normalizado: "${conceptoNormalizado}"`)
        
        // Verificar si el concepto est√° contenido en el p√°rrafo
        if (parrafoNormalizado.includes(conceptoNormalizado)) {
          result.concepto = concepto
          result.extractedFields.push('concepto')
          console.log('‚úÖ CONCEPTO ENCONTRADO EN P√ÅRRAFO "Por concepto de":', concepto)
          console.log('üìç P√°rrafo completo:', parrafoPorConcepto)
          break
        } else {
          console.log(`   ‚ùå "${concepto}" NO est√° contenido en el p√°rrafo`)
        }
      }
    } else {
      console.log('‚ùå No se encontr√≥ p√°rrafo "Por concepto de"')
    }
    
    // FALLBACK: Si no encuentra p√°rrafo "Por concepto de", usar patrones regex en todo el documento
    if (!result.concepto) {
      console.log('üîç Fallback: Usando patrones regex en todo el documento...')
      
      for (const { concepto, patron } of PATTERNS.conceptosPatrones) {
        const conceptoMatch = text.match(patron)
        if (conceptoMatch) {
          result.concepto = concepto
          result.extractedFields.push('concepto')
          console.log('‚úÖ Concepto encontrado (fallback regex):', concepto)
          console.log('üìç Match encontrado:', conceptoMatch[0])
          break
        } else {
          console.log(`   ‚ùå Patr√≥n "${patron}" no encontrado para "${concepto}"`)
        }
      }
      
      if (!result.concepto) {
        console.log('‚ùå No se pudo extraer concepto con ning√∫n m√©todo')
      }
    }

    // CRITERIO 4: GENERACI√ìN DE DESCRIPCI√ìN (Combinando 3 partes) ‚úÖ
    console.log('4Ô∏è‚É£ Generando descripci√≥n completa...')
    
    // PARTE 1: L√≠nea completa que contiene "CUENTA DE COBRO"
    console.log('üìã Parte 1: Buscando l√≠nea "CUENTA DE COBRO"...')
    const lineaCuentaCobroMatch = text.match(/^.*CUENTA\s+DE\s+COBRO.*$/gim)
    let parte1 = ''
    
    if (lineaCuentaCobroMatch && lineaCuentaCobroMatch[0]) {
      parte1 = lineaCuentaCobroMatch[0].trim()
      console.log('‚úÖ Parte 1 encontrada:', parte1)
    } else {
      console.log('‚ùå Parte 1 no encontrada')
    }
    
    // PARTE 2: P√°rrafo completo que inicia con "Por concepto de"
    console.log('üìã Parte 2: Buscando p√°rrafo "Por concepto de"...')
    let parte2 = ''
    
    // Usar los mismos patrones que usamos para extraer concepto
    const parrafoPatternsDescripcion = [
      // P√°rrafo completo hasta dos puntos (:)
      /Por\s+concepto\s+de\s+([^:]+:?)/gi,
      // P√°rrafo hasta salto de l√≠nea doble o final
      /Por\s+concepto\s+de\s+([^\n\r]+(?:\n[^\n\r]+)*?)(?:\n\s*\n|$)/gi,
      // P√°rrafo hasta encontrar una l√≠nea que empiece con may√∫scula (nueva secci√≥n)
      /Por\s+concepto\s+de\s+(.*?)(?=\n[A-Z√Å√â√ç√ì√ö√ë]|$)/gi,
      // Fallback simple para una sola l√≠nea
      /Por\s+concepto\s+de\s*([^\n\r]+)/gi
    ]
    
    for (const pattern of parrafoPatternsDescripcion) {
      const match = text.match(pattern)
      if (match && match[0]) {
        parte2 = match[0].trim()
        console.log('‚úÖ Parte 2 encontrada:', parte2.substring(0, 100) + '...')
        break
      }
    }
    
    if (!parte2) {
      console.log('‚ùå Parte 2 no encontrada')
    }
    
    // PARTE 3: ELIMINADA por solicitud del usuario
    console.log('üìã Parte 3: Eliminada - Solo se usar√°n Parte 1 y Parte 2')
    let parte3 = '' // Se mantiene vac√≠a intencionalmente
    
    // CONSTRUIR DESCRIPCI√ìN FINAL combinando las 2 partes (Parte 3 eliminada)
    console.log('üî® Construyendo descripci√≥n final...')
    
    if (parte1 || parte2) {
      let descripcionFinal = []
      
      // Agregar cada parte que exista
      if (parte1) {
        descripcionFinal.push(parte1)
        console.log('‚úÖ A√±adida Parte 1 (CUENTA DE COBRO)')
      }
      
      if (parte2) {
        descripcionFinal.push(parte2)
        console.log('‚úÖ A√±adida Parte 2 (Por concepto de)')
      }
      
      // Combinar con saltos de l√≠nea dobles
      result.descripcion = descripcionFinal.join('\n\n').trim()
      result.extractedFields.push('descripcion')
      
      console.log(`‚úÖ Descripci√≥n generada con ${descripcionFinal.length} partes (Parte 3 eliminada)`)
      console.log('üìÑ Descripci√≥n final (primeros 200 chars):', result.descripcion.substring(0, 200) + '...')
    } else {
      console.log('‚ùå No se pudo generar descripci√≥n - ninguna parte encontrada')
    }

    // CRITERIO 5: EXTRACCI√ìN DE VALOR SOLICITUD (Total sin IVA) ‚úÖ
    console.log('5Ô∏è‚É£ Extrayendo valor de solicitud...')
    
    // Buscar espec√≠ficamente "Total" (primera letra may√∫scula, resto min√∫scula)
    console.log('üìã Buscando patr√≥n "Total" (may√∫scula inicial)...')
    const totalPatronEspecifico = /(?:^|[\s\n\r])Total\s*\$?\s*([\d,\.]+)/gm
    const totalMatches = Array.from(text.matchAll(totalPatronEspecifico))
    console.log(`üìä Matches de "Total" encontrados: ${totalMatches.length}`)
    
    let valoresEncontrados: number[] = []
    
    if (totalMatches.length > 0) {
      for (let i = 0; i < totalMatches.length; i++) {
        const match = totalMatches[i]
        console.log(`üîç Match ${i+1}: "${match[0].replace(/[\r\n]/g, ' ').trim()}"`)
        
        if (match[1]) {
          console.log(`üí∞ Valor crudo encontrado: "${match[1]}"`)
          
          // Aplicar limpieza de formato colombiano
          const valorLimpio = cleanNumericValue(match[1])
          const valorNum = parseFloat(valorLimpio)
          console.log(`üßÆ Despu√©s de limpiar: "${match[1]}" -> "${valorLimpio}" -> ${valorNum}`)
          
          // Validaci√≥n: El valor debe ser > 0
          if (valorNum > 0) {
            valoresEncontrados.push(valorNum)
            console.log(`‚úÖ Valor v√°lido agregado: $${Math.round(valorNum).toLocaleString('es-CO')}`)
          } else {
            console.log(`‚ùå Valor inv√°lido (‚â§ 0): ${valorNum}`)
          }
        }
      }
    }
    
    // Selecci√≥n: Si hay m√∫ltiples matches, tomar el valor m√°s grande
    if (valoresEncontrados.length > 0) {
      const valorMaximo = Math.max(...valoresEncontrados)
      result.valorSolicitud = Math.round(valorMaximo) // N√∫mero entero redondeado
      result.extractedFields.push('valorSolicitud')
      
      console.log(`üéØ Seleccionado valor m√°s grande de ${valoresEncontrados.length} encontrados:`)
      console.log(`üí∏ Valores encontrados: ${valoresEncontrados.map(v => `$${Math.round(v).toLocaleString('es-CO')}`).join(', ')}`)
      console.log(`‚úÖ Valor Solicitud final: $${result.valorSolicitud.toLocaleString('es-CO')}`)
    } else {
      console.log('‚ùå No se encontraron valores v√°lidos despu√©s de "Total"')
    }

    // CRITERIO 6: EXTRACCI√ìN DE IVA (Valor espec√≠fico del PDF) ‚úÖ
    console.log('6Ô∏è‚É£ Extrayendo valor del IVA...')
    
    // Buscar l√≠neas que contengan "IVA" con valores monetarios
    console.log('üìã Buscando l√≠neas que contengan "IVA"...')
    const ivaPatronEspecifico = /(?:^|[\s\n\r])IVA(?:\s*\([0-9]+%?\))?\s*\$?\s*([\d,\.]+)/gim
    const ivaMatches = Array.from(text.matchAll(ivaPatronEspecifico))
    console.log(`üìä Matches de "IVA" encontrados: ${ivaMatches.length}`)
    
    let valoresIvaEncontrados: number[] = []
    
    if (ivaMatches.length > 0) {
      for (let i = 0; i < ivaMatches.length; i++) {
        const match = ivaMatches[i]
        console.log(`üîç Match ${i+1}: "${match[0].replace(/[\r\n]/g, ' ').trim()}"`)
        
        if (match[1]) {
          console.log(`üí∞ Valor crudo encontrado: "${match[1]}"`)
          
          // Aplicar limpieza de formato colombiano
          const valorLimpio = cleanNumericValue(match[1])
          const valorNum = parseFloat(valorLimpio)
          console.log(`üßÆ Despu√©s de limpiar: "${match[1]}" -> "${valorLimpio}" -> ${valorNum}`)
          
          // Validaci√≥n: El valor debe ser > 0
          if (valorNum > 0) { // Solo acepta valores mayores a cero
            valoresIvaEncontrados.push(valorNum)
            console.log(`‚úÖ Valor IVA v√°lido agregado: $${Math.round(valorNum).toLocaleString('es-CO')}`)
          } else {
            console.log(`‚ùå Valor inv√°lido (‚â§ 0): ${valorNum}`)
          }
        }
      }
    }

    // Selecci√≥n: Si hay m√∫ltiples matches, tomar el valor m√°s grande
    let ivaFinalEncontrado: number | null = null
    
    if (valoresIvaEncontrados.length > 0) {
      const valorMaximoIva = Math.max(...valoresIvaEncontrados)
      ivaFinalEncontrado = Math.round(valorMaximoIva) // N√∫mero entero redondeado
      
      console.log(`üéØ Seleccionado valor IVA m√°s grande de ${valoresIvaEncontrados.length} encontrados:`)
      console.log(`üí∏ Valores IVA encontrados: ${valoresIvaEncontrados.map(v => `$${Math.round(v).toLocaleString('es-CO')}`).join(', ')}`)
      console.log(`‚úÖ Valor IVA final: $${ivaFinalEncontrado.toLocaleString('es-CO')}`)
    } else {
      console.log('‚ùå No se encontraron valores de IVA v√°lidos')
    }
    
    // ASIGNACI√ìN FINAL: Si el valor del IVA es mayor a cero, tieneIVA = true, sino tieneIVA = false
    if (ivaFinalEncontrado !== null && ivaFinalEncontrado > 0) {
      result.tieneIVA = true  // "S" en el formulario
      result.valorIVA = ivaFinalEncontrado
      result.extractedFields.push('tieneIVA')
      result.extractedFields.push('valorIVA')
      console.log(`‚úÖ RESULTADO IVA: tieneIVA=true, valorIVA=$${result.valorIVA.toLocaleString('es-CO')}`)
    } else {
      result.tieneIVA = false // "N" en el formulario
      result.valorIVA = null
      console.log('‚úÖ RESULTADO IVA: tieneIVA=false, valorIVA=null')
    }

    // CRITERIO 7: EXTRACCI√ìN DE TOTAL SOLICITUD (Valor total final con IVA incluido) ‚úÖ
    console.log('7Ô∏è‚É£ Extrayendo valor total de la solicitud...')
    
    // Buscar espec√≠ficamente "TOTAL" (todo en may√∫sculas)
    console.log('üìã Buscando patr√≥n "TOTAL" (todo en may√∫sculas)...')
    
    // M√∫ltiples patrones para diferentes formatos
    const totalPatrones = [
      // 1. TOTAL $X,XXX,XXX
      /(?:^|[\s\n\r])TOTAL\s*\$?\s*([\d,\.]+)/gm,
      // 2. TOTAL: $X,XXX,XXX  
      /(?:^|[\s\n\r])TOTAL:\s*\$?\s*([\d,\.]+)/gm,
      // 3. TOTAL $X,XXX,XXX (espacios m√∫ltiples)
      /(?:^|[\s\n\r])TOTAL\s+\$?\s*([\d,\.]+)/gm,
      // 4. ^TOTAL $X,XXX,XXX (inicio de l√≠nea)
      /^TOTAL\s*\$?\s*([\d,\.]+)/gm
    ]
    
    let valoresTotalEncontrados: number[] = []
    
    for (let i = 0; i < totalPatrones.length; i++) {
      const patron = totalPatrones[i]
      const matches = Array.from(text.matchAll(patron))
      
      console.log(`üìä Patr√≥n ${i+1} encontr√≥ ${matches.length} matches`)
      
      if (matches.length > 0) {
        for (let j = 0; j < matches.length; j++) {
          const match = matches[j]
          console.log(`üîç Patr√≥n ${i+1}, Match ${j+1}: "${match[0].replace(/[\r\n]/g, ' ').trim()}"`)
          
          if (match[1]) {
            console.log(`üí∞ Valor crudo encontrado: "${match[1]}"`)
            
            // Aplicar limpieza de formato colombiano
            const valorLimpio = cleanNumericValue(match[1])
            const valorNum = parseFloat(valorLimpio)
            console.log(`üßÆ Despu√©s de limpiar: "${match[1]}" -> "${valorLimpio}" -> ${valorNum}`)
            
            // Validaci√≥n: El valor debe ser > 0
            if (valorNum > 0) {
              valoresTotalEncontrados.push(valorNum)
              console.log(`‚úÖ Valor TOTAL v√°lido agregado: $${Math.round(valorNum).toLocaleString('es-CO')}`)
            } else {
              console.log(`‚ùå Valor inv√°lido (‚â§ 0): ${valorNum}`)
            }
          }
        }
      }
    }
    
    // Selecci√≥n: Si hay m√∫ltiples matches, tomar el valor m√°s grande
    if (valoresTotalEncontrados.length > 0) {
      const valorMaximoTotal = Math.max(...valoresTotalEncontrados)
      result.valorTotalSolicitud = Math.round(valorMaximoTotal) // N√∫mero entero redondeado
      result.extractedFields.push('valorTotalSolicitud')
      
      console.log(`üéØ Seleccionado valor TOTAL m√°s grande de ${valoresTotalEncontrados.length} encontrados:`)
      console.log(`üí∏ Valores TOTAL encontrados: ${valoresTotalEncontrados.map(v => `$${Math.round(v).toLocaleString('es-CO')}`).join(', ')}`)
      console.log(`‚úÖ Valor Total Solicitud final: $${result.valorTotalSolicitud.toLocaleString('es-CO')}`)
    } else {
      console.log('‚ùå No se encontraron valores de TOTAL v√°lidos')
      
      // FALLBACK: Calcular como suma si no se encuentra TOTAL directo
      console.log('üîÑ Usando fallback: calculando como Valor Solicitud + Valor IVA...')
      if (result.valorSolicitud !== null) {
        const valorBase = result.valorSolicitud
        const valorIVA = result.valorIVA || 0
        result.valorTotalSolicitud = valorBase + valorIVA
        result.extractedFields.push('valorTotalSolicitud')
        console.log(`‚úÖ Valor Total Solicitud calculado (fallback): $${result.valorTotalSolicitud.toLocaleString('es-CO')}`)
      }
    }

    // Calcular confianza basada en campos extra√≠dos
    const fieldsCount = result.extractedFields.length
    if (fieldsCount >= 5) {
      result.confidence = 'high'
    } else if (fieldsCount >= 3) {
      result.confidence = 'medium'
    } else {
      result.confidence = 'low'
    }

    console.log(`‚úÖ === EXTRACCI√ìN COMPLETADA ===`)
    console.log(`üìä Campos extra√≠dos (${fieldsCount}): ${result.extractedFields.join(', ')}`)
    console.log(`üìà Confianza: ${result.confidence}`)
    
  } catch (error) {
    console.error('‚ùå Error durante extracci√≥n:', error)
    result.success = false
    result.confidence = 'low'
  }

  return result
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'M√©todo no permitido' })
  }

  try {
    // Configurar formidable para parsear archivos
    const form = formidable({
      maxFiles: 1,
      maxFileSize: 10 * 1024 * 1024, // 10MB m√°ximo
      keepExtensions: true,
    })

    // Parsear la request
    const [fields, files] = await form.parse(req)
    
    const fileArray = files.pdf
    if (!fileArray || fileArray.length === 0) {
      return res.status(400).json({ 
        error: 'No se encontr√≥ archivo PDF para procesar' 
      })
    }

    const file = Array.isArray(fileArray) ? fileArray[0] : fileArray

    // Validar que sea PDF
    if (file.mimetype !== 'application/pdf') {
      return res.status(400).json({ 
        error: 'El archivo debe ser un PDF v√°lido' 
      })
    }

    console.log('üîç Procesando PDF para extracci√≥n de datos:', file.originalFilename)

    // Leer el archivo PDF
    const fileBuffer = fs.readFileSync(file.filepath)
    
    // Extraer texto del PDF
    const pdfData = await pdfParse(fileBuffer)
    const extractedText = pdfData.text

    console.log('üìÑ Texto extra√≠do del PDF (primeros 500 chars):', extractedText.substring(0, 500))
    console.log('üìÑ Texto completo para an√°lisis:', extractedText.length > 500 ? '...(texto m√°s largo, buscando IVA en todo el contenido)' : extractedText)

    // Procesar el texto y extraer datos estructurados
    const extractedData = extractDataFromText(extractedText)

    console.log('‚ú® Datos extra√≠dos:', {
      fields: extractedData.extractedFields,
      confidence: extractedData.confidence,
      success: extractedData.success,
      valorTotalSolicitud: extractedData.valorTotalSolicitud
    })

    // Limpiar archivo temporal
    fs.unlinkSync(file.filepath)

    // Responder con los datos extra√≠dos
    res.status(200).json(extractedData)

  } catch (error) {
    console.error('Error en extract-pdf-data API:', error)
    res.status(500).json({ 
      error: 'Error procesando el archivo PDF',
      details: error instanceof Error ? error.message : 'Error desconocido'
    })
  }
}
